import Head from 'next/head'
import Image from 'next/image'
import CreateMessstyles from '../styles/CreateMess.module.css'
import Link from "next/link";
import Layout from "../components/Layout";
import { useState } from "react";
import Form from 'react-bootstrap/Form';
import Button from 'react-bootstrap/Button';
import axios from "axios";
import { ToastContainer, toast } from 'react-toastify';
import 'react-toastify/dist/ReactToastify.css';
import Router from 'next/router'
import Skeleton from 'react-loading-skeleton'
import 'react-loading-skeleton/dist/skeleton.css'
import { apiPost } from '../services/http-methods';

export default function Createmess() {
    const [mess_name, setMessName] = useState("");
    const [mess_id, setMessId] = useState("");

    const [loading, setLoading] = useState(false);

    const Save = async (e) => {
        e.preventDefault();
        if (!mess_name || !mess_id) {
            toast.error('Please fill the form')
            return;
        }

        await apiPost('/mess', {
            mess_name,
            mess_id,
        }, {
            headers: {
                'Accept': 'application/json',
                'Content-Type': 'application/json',
                Authorization: `Bearer ${localStorage.getItem('access_token')}`
            }
        })

            // await axios.post("http://localhost:5000/mess", {
            //     mess_name,
            //     mess_id,
            // }, {
            //     headers: {
            //         'Accept': 'application/json',
            //         'Content-Type': 'application/json',
            //         Authorization: `Bearer ${localStorage.getItem('access_token')}`
            //     }
            // })
            .then((data) => {
                if (data.data.success) {
                    toast.success(data.data.msg);
                    Router.push({
                        pathname: '/statement',
                        query: { mess_id: data.data.mess_info.mess_id }
                    });

                } else if (!data.data.success) {
                    toast.error(data.data.msg);
                }
            }).catch(err => {
                toast.error(err.response.data.message[0]);
            })
    }

    return (
        <Layout>
            {!loading ?
                <div className={CreateMessstyles.container}>
                    <Head>
                        <title>Create a Mess</title>
                        <meta name="description" content="Generated by create next app" />
                        <link rel="icon" href="/favicon.ico" />
                    </Head>

                    <main className={CreateMessstyles.main}>

                        <Form onSubmit={Save} >
                            <Form.Group className="mb-3">
                                <Form.Label className={CreateMessstyles.input_label}>Mess Name</Form.Label>
                                <Form.Control className={CreateMessstyles.input} type="text" name={"mess_name"} placeholder="Enter Mess Name"
                                    onChange={(e) => {
                                        setMessName(e.target.value);
                                    }}
                                />
                            </Form.Group>

                            <Form.Group className="mb-3">
                                <Form.Label className={CreateMessstyles.input_label}>Mess Id</Form.Label>
                                <Form.Control className={CreateMessstyles.input} type="text" placeholder="Enter Mess Id"
                                    onChange={(e) => {
                                        setMessId(e.target.value);
                                    }}
                                />
                            </Form.Group>
                            <span>
                                <Link href={'/'}>
                                    <Button className={CreateMessstyles.button_back} variant="outline-danger">Back</Button>
                                </Link>


                                <Button className={CreateMessstyles.button_create} variant="outline-primary" type={'submit'}
                                >
                                    Create
                                </Button>
                                <ToastContainer
                                    position="top-right"
                                    autoClose={5000}
                                    hideProgressBar={false}
                                    newestOnTop={false}
                                    closeOnClick
                                    rtl={false}
                                    pauseOnFocusLoss
                                    draggable
                                    pauseOnHover
                                />

                            </span>

                        </Form>


                    </main>

                    {/*          <footer className={styles.footer}>*/}
                    {/*              <a*/}
                    {/*                  href="https://vercel.com?utm_source=create-next-app&utm_medium=default-template&utm_campaign=create-next-app"*/}
                    {/*                  target="_blank"*/}
                    {/*                  rel="noopener noreferrer"*/}
                    {/*              >*/}
                    {/*                  Powered by{' '}*/}
                    {/*                  <span className={styles.logo}>*/}
                    {/*  <Image src="/vercel.svg" alt="Vercel Logo" width={72} height={16}/>*/}
                    {/*</span>*/}
                    {/*              </a>*/}
                    {/*          </footer>*/}
                </div> : <Skeleton />
            }
        </Layout>
    )
}
